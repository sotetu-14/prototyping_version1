# Auto detect text files and perform LF normalization
* text=auto

<!DOCTYPE html>
<html lang="ja">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width" />
<title>タイピング</title>
<meta name="description" content=""/>
<link href="reset.css" rel="stylesheet" type="text/css">
<link href="style.css" rel="stylesheet" type="text/css">
<script src="main.js"></script>
</head>
<body>
    <div id="screen1" class="screen active">
        <div class="main_1">
            <div class="title_entire">
                <p class="title_text">タイピングソフト(仮)</p>
            </div>
            <div class="menu">
                <div class="button_pearent">
                    <button id="button1">ゲーム開始</button>   
                </div>
            </div>
        </div>
    </div>    
    <div id="screen2" class="screen">
        <div class="main_2">
            <p id="screen2_back"></p>
            <div class="display_parent">
                <h1 id="display">※ここに問題が表示</h1>
            </div>
            <div class="input_parent">
                <input type="text" id="input_room" placeholder="" size="23">
            </div>
            <div class="warn_parent">
                <p class="warn">※ENTERを押すと判定されます</p>
            </div>    
            <div class="button_pearent">
                <button id="button2">結果発表</button>   
            </div>
        </div>
    </div>
    <div id="screen3" class="screen">
        <div class="main_3">
            <div class="button_pearent">
                <button id="button4">もう一度プレイ</button>   
                <button id="button3">メニューに戻る</button>   
            </div>
            <div id="apologize_parent">
                <p id="apologize">※スコア計算機能は未実装です</p>
            </div>
        </div>
    </div>
</body>
</html>
// 関数の定義

// 表示される文字の倉庫
const sentence = [
    "新品スーツを買って入社式に備える",
    "隣の客はよく柿食う客だ",
    "隣の竹垣に竹立て掛けた",
    "今日歯医者に行く",
    "このドラマは来週も続くようだ",
    "文章を校正する",
    "この物質は鉄の成分で構成されている",
    "自転車事故のニュースを聞いた",
    "おばから入学のお祝いをもらった",
    "キャベツの千切り",
    "少年よ大志を抱け",
    "一番好きな食べ物は寿司です",
    "オンラインショッピングを利用する",
    "僕と彼は感動的な再会をしました",
    "無人島に漂着してからもう二週間",
    "言われたとおりにやったのに",
    "どこかでお会いしませんでしたか？",
    "残念なお知らせがあります",
    "使い捨てコンタクトレンズを使い回す",
    "私が大食いチャンピオンです",
    "生まれ変わったら鳥になりたい",
    "地球は青かった",
    "私はあなたの前にいる",
    "どこから来たんですか？",
    "今日は天気がいいですね",
    "美しい夕日を見た",
    "何か飲みませんか？",
    "私の猫は大きいです",
    "美味しい料理を食べたいです",
    "あなたはどこに住んでいますか？",
    "私はお茶を飲むのが好きです",
    "あなたの目はとてもきれいです",
    "彼はとても頭がいいです",
    "美味しいコーヒーが飲みたいです",
    "私は本を読むのが好きです",
    "あなたは何か趣味はありますか？",
    "今晩は何を食べますか？",
    "日本の伝統文化に興味があります",
    "私たちは一緒に買い物に行きました",
    "お腹が空いたので何か食べたいです",
    "バカと天才は紙一重",
    "良い香りのする花が好きです",
    "私たちは山に登りました",
    "私はアクション映画が好きです"
];

// ディスプレイに書き込む(関数)
let random_save = -1;
const display_fill = () => {
    let random = Math.floor(Math.random() * sentence.length);
    // 前回と値が同じ間は引き直し
    while(random === random_save) {
        random = Math.floor(Math.random() * sentence.length);
    }
    random_save = random;
    const display = document.getElementById('display');
    display.textContent = sentence[random];  
};

// (4)スクリーン2の後ろに書き込む(関数)
screen2_back_fill = (correct_fill) => {
    screen2_back = document.getElementById('screen2_back');
    screen2_back.textContent += correct_fill+" ";
};


// 画面切り替え(1)
let button1;
let button2;
let button3;
let button4;

document.addEventListener("DOMContentLoaded", function() {
    // 画面の切り替え(最初の設定)
    button1 = document.querySelector('#button1');
    button2 = document.querySelector('#button2');
    button3 = document.querySelector('#button3');
    button4 = document.querySelector('#button4');
    // 画面の切り替え(実際の操作)
    button1.addEventListener('click', function() {
        showScreen('screen2');
    }); 
    button2.addEventListener('click', function() {
        showScreen('screen3');
        // 結果発表が押されると、背景とインプットを空にする
        screen2_back = document.getElementById('screen2_back');
        screen2_back.textContent = "";
        const input_room = document.getElementById('input_room');
        input_room.value = "";
    }); 
    button3.addEventListener('click', function() {
        showScreen('screen1');
    }); 
    button4.addEventListener('click', function() {
        showScreen('screen2');
        display_fill();
    });
    showScreen = (screen_count) => {
    const nowScreen = document.querySelector('.active');
    nowScreen.classList.remove('active');
    const nextScreen = document.getElementById(screen_count);
    nextScreen.classList.add('active');
    };    
});

// 関数を使って文字を書き込む(2)
document.addEventListener("DOMContentLoaded", function() {
display_fill();    
});


// 文字の判定(3)
document.addEventListener('DOMContentLoaded', function() {
    document.addEventListener('keydown', function(what) {
    // 値の取得
    const display = document.getElementById('display');
    let correct = display.textContent;
    const input_room = document.getElementById('input_room');
    let answer = input_room.value;
    // 実際の処理(if文)    
        if(what.key === "Enter") {
            if(correct === answer) {
                input_room.value = "";
                screen2_back_fill(correct);
                display_fill();
            }
            else {
                input_room.value = "";
            }
        }
    });
});

// escが押されたら背景文字削除(5)
document.addEventListener('DOMContentLoaded', function() {
    document.addEventListener('keydown', function(what_2) {
        if(what_2.key === "Escape") {
            const screen2_back = document.getElementById('screen2_back');
            screen2_back.textContent = "";
        }
    })
})
/* resset.dev • v5.0.2 */

/* # =================================================================
   # Global selectors
   # ================================================================= */

   html {
    box-sizing: border-box;
    -webkit-text-size-adjust: 100%; /* Prevent adjustments of font size after orientation changes in iOS */
    word-break: normal;
    -moz-tab-size: 4;
    tab-size: 4;
  }
  
  *,
  ::before,
  ::after {
    background-repeat: no-repeat; /* Set `background-repeat: no-repeat` to all elements and pseudo elements */
    box-sizing: inherit;
  }
  
  ::before,
  ::after {
    text-decoration: inherit; /* Inherit text-decoration and vertical align to ::before and ::after pseudo elements */
    vertical-align: inherit;
  }
  
  * {
    padding: 0; /* Reset `padding` and `margin` of all elements */
    margin: 0;
  }
  
  /* # =================================================================
     # General elements
     # ================================================================= */
  
  hr {
    overflow: visible; /* Show the overflow in Edge and IE */
    height: 0; /* Add the correct box sizing in Firefox */
    color: inherit; /* Correct border color in Firefox. */
  }
  
  details,
  main {
    display: block; /* Render the `main` element consistently in IE. */
  }
  
  summary {
    display: list-item; /* Add the correct display in all browsers */
  }
  
  small {
    font-size: 80%; /* Set font-size to 80% in `small` elements */
  }
  
  [hidden] {
    display: none; /* Add the correct display in IE */
  }
  
  abbr[title] {
    border-bottom: none; /* Remove the bottom border in Chrome 57 */
    /* Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari */
    text-decoration: underline;
    text-decoration: underline dotted;
  }
  
  a {
    background-color: transparent; /* Remove the gray background on active links in IE 10 */
  }
  
  a:active,
  a:hover {
    outline-width: 0; /* Remove the outline when hovering in all browsers */
  }
  
  code,
  kbd,
  pre,
  samp {
    font-family: monospace, monospace; /* Specify the font family of code elements */
  }
  
  pre {
    font-size: 1em; /* Correct the odd `em` font sizing in all browsers */
  }
  
  b,
  strong {
    font-weight: bolder; /* Add the correct font weight in Chrome, Edge, and Safari */
  }
  
  /* https://gist.github.com/unruthless/413930 */
  sub,
  sup {
    font-size: 75%;
    line-height: 0;
    position: relative;
    vertical-align: baseline;
  }
  
  sub {
    bottom: -0.25em;
  }
  
  sup {
    top: -0.5em;
  }
  
  table {
    border-color: inherit; /* Correct border color in all Chrome, Edge, and Safari. */
    text-indent: 0; /* Remove text indentation in Chrome, Edge, and Safari */
  }
  
  iframe {
    border-style: none;
  }
  
  /* # =================================================================
     # Forms
     # ================================================================= */
  
  input {
    border-radius: 0;
  }
  
  [type='number']::-webkit-inner-spin-button,
  [type='number']::-webkit-outer-spin-button {
    height: auto; /* Correct the cursor style of increment and decrement buttons in Chrome */
  }
  
  [type='search'] {
    -webkit-appearance: textfield; /* Correct the odd appearance in Chrome and Safari */
    outline-offset: -2px; /* Correct the outline style in Safari */
  }
  
  [type='search']::-webkit-search-decoration {
    -webkit-appearance: none; /* Remove the inner padding in Chrome and Safari on macOS */
  }
  
  textarea {
    overflow: auto; /* Internet Explorer 11+ */
    resize: vertical; /* Specify textarea resizability */
  }
  
  button,
  input,
  optgroup,
  select,
  textarea {
    font: inherit; /* Specify font inheritance of form elements */
  }
  
  optgroup {
    font-weight: bold; /* Restore the font weight unset by the previous rule */
  }
  
  button {
    overflow: visible; /* Address `overflow` set to `hidden` in IE 8/9/10/11 */
  }
  
  button,
  select {
    text-transform: none; /* Firefox 40+, Internet Explorer 11- */
  }
  
  /* Apply cursor pointer to button elements */
  button,
  [type='button'],
  [type='reset'],
  [type='submit'],
  [role='button'] {
    cursor: pointer;
  }
  
  /* Remove inner padding and border in Firefox 4+ */
  button::-moz-focus-inner,
  [type='button']::-moz-focus-inner,
  [type='reset']::-moz-focus-inner,
  [type='submit']::-moz-focus-inner {
    border-style: none;
    padding: 0;
  }
  
  /* Replace focus style removed in the border reset above */
  button:-moz-focusring,
  [type='button']::-moz-focus-inner,
  [type='reset']::-moz-focus-inner,
  [type='submit']::-moz-focus-inner {
    outline: 1px dotted ButtonText;
  }
  
  button,
  html [type='button'], /* Prevent a WebKit bug where (2) destroys native `audio` and `video`controls in Android 4 */
  [type='reset'],
  [type='submit'] {
    -webkit-appearance: button; /* Correct the inability to style clickable types in iOS */
  }
  
  /* Remove the default button styling in all browsers */
  button,
  input,
  select,
  textarea {
    background-color: transparent;
    border-style: none;
  }
  
  a:focus,
  button:focus,
  input:focus,
  select:focus,
  textarea:focus {
    outline-width: 0;
  }
  
  /* Style select like a standard input */
  select {
    -moz-appearance: none; /* Firefox 36+ */
    -webkit-appearance: none; /* Chrome 41+ */
  }
  
  select::-ms-expand {
    display: none; /* Internet Explorer 11+ */
  }
  
  select::-ms-value {
    color: currentColor; /* Internet Explorer 11+ */
  }
  
  legend {
    border: 0; /* Correct `color` not being inherited in IE 8/9/10/11 */
    color: inherit; /* Correct the color inheritance from `fieldset` elements in IE */
    display: table; /* Correct the text wrapping in Edge and IE */
    max-width: 100%; /* Correct the text wrapping in Edge and IE */
    white-space: normal; /* Correct the text wrapping in Edge and IE */
    max-width: 100%; /* Correct the text wrapping in Edge 18- and IE */
  }
  
  ::-webkit-file-upload-button {
    /* Correct the inability to style clickable types in iOS and Safari */
    -webkit-appearance: button;
    color: inherit;
    font: inherit; /* Change font properties to `inherit` in Chrome and Safari */
  }
  
  /* Replace pointer cursor in disabled elements */
  [disabled] {
    cursor: default;
  }
  
  /* # =================================================================
     # Specify media element style
     # ================================================================= */
  
  img {
    border-style: none; /* Remove border when inside `a` element in IE 8/9/10 */
  }
  
  /* Add the correct vertical alignment in Chrome, Firefox, and Opera */
  progress {
    vertical-align: baseline;
  }
  
  /* # =================================================================
     # Accessibility
     # ================================================================= */
  
  /* Specify the progress cursor of updating elements */
  [aria-busy='true'] {
    cursor: progress;
  }
  
  /* Specify the pointer cursor of trigger elements */
  [aria-controls] {
    cursor: pointer;
  }
  
  /* Specify the unstyled cursor of disabled, not-editable, or otherwise inoperable elements */
  [aria-disabled='true'] {
    cursor: default;
  }
/* 全体に適応させる部分 */
html body{
    /* overflow: hidden; */
    height: 100%;
}
.screen {
    display: none;
    /* 画面いっぱいに表示 */
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
}
.screen.active {
    display: block;
}
.button_pearent {
    text-align: center;
}
button {
    display: inline-block;
    background-color: white;
    color: #2b3467;
    font-size: 3rem;
    padding: 8px 16px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    margin: 55px;
    border: 5px solid #2b3467;
    font-weight: bold;
    transition: 0.25s;
}
button:hover {
    background-color: white;
    transition: 0.25s;
    border: 5px solid #eb455f;
    color: #eb455f;
}




/* スクリーン1 */
#screen1 {
    overflow: hidden;
    background-color: #fcffe7;
    /* height: 3000px; */
}
.main_1 {
    padding: 200px 0 0 0;
    /* margin: 100px 0 0 0; */
}
/* タイピングソフト(仮) */
.title_entire{ 
    background-color: #ffffff;
    width: 35%;
    height: 150px;
    margin: 50px auto 0 auto;
    border-radius: 20px;
    border: 7px solid #2b3467;
    display: flex;
}

.title_text {
    display: block;
    margin: auto;
    color: #2b3467;
    font-weight: 900;
    font-size: 3.7rem;
}
/* ボタン1 */
#button1 {
    margin: 150px;
}



/* スクリーン2 */
#screen2 {
    background-color: #fcffe7;
}

/* 文字を表示させる部分 */
.display_parent {
    text-align: center;
    margin: 200px 0 0 0;
}

#display {
    display: inline-block;
    text-align: center;
    font-size: 4rem;
    width: 60%;
    background-color: white;
    border-radius: 15px;
    border: 5px solid #2b3467;
    padding: 3px 0;
    color: #2b3467;
}
/* 文字入力欄 */
.input_parent {
    text-align: center;
}
#input_room {
    display: inline-block;
    background-color: white;
    padding: 10px 80px;
    margin: 100px 0 0 0;
    font-size: 4rem;
    text-align: center;
    border: 6px solid #eb455f;
    color: #eb455f;
    border-radius: 50px;
    font-weight: bold;
}
#button2 {
    margin: 0px 0 0 0;
}
/* 警告文の表示 */
.warn_parent {
    text-align: center;
}
.warn {
    margin: 10px 0px 100px 0px;
    font-size: 1.5rem;
    text-decoration: underline;
}
/* スクリーン2の背景について */
#screen2_back {
    position: fixed;
    top: 10px;
    left: 10px;
    font-size: 4rem;
    color: #eb455f;
    z-index: -1;
}
.main_2 {
    position: relative; /* 相対位置指定 */
    z-index: 1; /* 前面に表示 */
}

/* スクリーン3 */
#screen3 {
    background-color: #fcffe7;
}
#button3 {
    margin: 300px 0 0 0;
}
#apologize_parent {
    text-align: center;
}
#apologize {
    color: #eb455f;
    font-size: 4rem;
}
